cmake_minimum_required(VERSION 3.10)

include(ExternalProject)

# Set policy CMP0135 to NEW to avoid timestamp warnings
if(POLICY CMP0135)
    cmake_policy(SET CMP0135 NEW)
endif()

# Set default build type to Release if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()


# Allow user to specify NVHPC and GCC installation paths
set(NVHPC_HOME "/home/Aaron/nvhpc/Linux_x86_64/21.3" CACHE STRING "Path to NVHPC installation")
set(GCC_HOME "/home/Aaron/gcc9" CACHE STRING "Path to GCC installation")

# Set compilers explicitly before project()
set(CMAKE_C_COMPILER "${NVHPC_HOME}/comm_libs/mpi/bin/mpicc" CACHE PATH "C compiler" FORCE)
set(CMAKE_CXX_COMPILER "${NVHPC_HOME}/comm_libs/mpi/bin/mpicxx" CACHE PATH "C++ compiler" FORCE)
set(CMAKE_Fortran_COMPILER "${GCC_HOME}/bin/gfortran" CACHE PATH "Fortran compiler" FORCE)
set(CMAKE_CUDA_COMPILER "${NVHPC_HOME}/compilers/bin/nvcc" CACHE PATH "CUDA compiler" FORCE)

# Define project
project(VVM2D VERSION 0.1.0 LANGUAGES CXX Fortran C CUDA)

# Set library and include paths
set(NVHPC_LIB_DIR "${NVHPC_HOME}/compilers/lib")
set(CUDA_INCLUDE_DIR "${NVHPC_HOME}/cuda/include")
set(CUDA_LIB_DIR "${NVHPC_HOME}/cuda/lib64")
set(GCC_LIB_DIR "${GCC_HOME}/lib64")
set(GCC_LIB32_DIR "${GCC_HOME}/lib")

# Find MPI
find_package(MPI REQUIRED)
include_directories(${MPI_CXX_INCLUDE_DIRS})

# Disable dependency file generation (-MF issue) for NVHPC
if(CMAKE_CXX_COMPILER_ID STREQUAL "NVHPC")
    set(CMAKE_CXX_DEPENDS "")
    set(CMAKE_C_DEPENDS "")
    set(CMAKE_DEPFILE_FLAGS_CXX "")
    set(CMAKE_DEPFILE_FLAGS_C "")
    add_definitions(-DEIGEN_DONT_PARALLELIZE)
endif()

# Find OpenMP
find_package(OpenMP REQUIRED)

# Set C++ standard to C++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Set where dependencies will be downloaded and installed
set(DEP_INSTALL_DIR "${CMAKE_SOURCE_DIR}/_deps/install")
file(MAKE_DIRECTORY ${DEP_INSTALL_DIR})

# Set compiler flags
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 ${MPI_CXX_COMPILE_FLAGS} -Wall -Wno-unused-function")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 ${MPI_CXX_COMPILE_FLAGS} -Wall")
endif()
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MPI_C_COMPILE_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")
set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -cpp -fPIC -fdefault-real-8")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MPI_CXX_LINK_FLAGS}")

# Add OpenMP flags
if(OpenMP_CXX_FOUND)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()
if(OpenMP_Fortran_FOUND)
    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${OpenMP_Fortran_FLAGS}")
endif()

# Set RPATH usage
set(CMAKE_INSTALL_RPATH "${DEP_INSTALL_DIR}/lib;${GCC9_LIB_DIR};${GCC9_LIB32_DIR};${NVHPC_HOME}/comm_libs/mpi/lib")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

add_definitions(-DRTE_USE_CBOOL)

# Include directories
include_directories(
    include
    ${DEP_INSTALL_DIR}/include
    ${MPI_CXX_INCLUDE_DIRS}
    ${CMAKE_SOURCE_DIR}/external/rte-rrtmgp-cpp/include
    ${CMAKE_SOURCE_DIR}/external/rte-rrtmgp-cpp/include_test
    ${CUDA_INCLUDE_DIR}
)

# ExternalProject for HDF5
find_library(HDF5_LIB NAMES hdf5 hdf5_serial HINTS ${DEP_INSTALL_DIR}/lib NO_DEFAULT_PATH)
find_library(HDF5_HL_LIB NAMES hdf5_hl HINTS ${DEP_INSTALL_DIR}/lib NO_DEFAULT_PATH)
if(NOT HDF5_LIB OR NOT HDF5_HL_LIB)
    ExternalProject_Add(
        hdf5_ext
        URL https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.1/src/hdf5-1.10.1.tar.gz
        PREFIX ${CMAKE_SOURCE_DIR}/_deps/hdf5
        CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=${DEP_INSTALL_DIR} --enable-cxx --enable-fortran --enable-shared --with-pic CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} FC=${CMAKE_Fortran_COMPILER}
        BUILD_COMMAND make -j${N_CORES}
        INSTALL_COMMAND make install
        UPDATE_COMMAND ""
        BUILD_ALWAYS FALSE
        DOWNLOAD_EXTRACT_TIMESTAMP TRUE
    )
else()
    message(STATUS "HDF5 found: ${HDF5_LIB}")
    message(STATUS "HDF5 high-level library found: ${HDF5_HL_LIB}")
endif()

# ExternalProject for NetCDF-C (depends on HDF5)
find_library(NETCDF_LIB NAMES netcdf HINTS ${DEP_INSTALL_DIR}/lib NO_DEFAULT_PATH)
if(NOT NETCDF_LIB)
    ExternalProject_Add(
        netcdf-c_ext
        URL https://github.com/Unidata/netcdf-c/archive/v4.3.3.1.tar.gz
        PREFIX ${CMAKE_SOURCE_DIR}/_deps/netcdf-c
        CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=${DEP_INSTALL_DIR} --enable-netcdf-4 --enable-shared --with-pic --disable-dap CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} FC=${CMAKE_Fortran_COMPILER} CPPFLAGS=-I${DEP_INSTALL_DIR}/include LDFLAGS=-L${DEP_INSTALL_DIR}/lib
        BUILD_COMMAND make -j${N_CORES}
        INSTALL_COMMAND make install
        UPDATE_COMMAND ""
        BUILD_ALWAYS FALSE
        DEPENDS hdf5_ext
        DOWNLOAD_EXTRACT_TIMESTAMP TRUE
    )
else()
    message(STATUS "NetCDF-C found in ${DEP_INSTALL_DIR}/lib")
endif()

# ExternalProject for NetCDF-CXX (depends on NetCDF-C)
find_library(NETCDF_CXX_LIB NAMES netcdf_c++4 HINTS ${DEP_INSTALL_DIR}/lib NO_DEFAULT_PATH)
if(NOT NETCDF_CXX_LIB)
    ExternalProject_Add(
        netcdf-cxx4_ext
        URL https://github.com/Unidata/netcdf-cxx4/archive/v4.3.0.tar.gz
        PREFIX ${CMAKE_SOURCE_DIR}/_deps/netcdf-cxx4
        CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=${DEP_INSTALL_DIR} --enable-shared --with-pic CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} CPPFLAGS=-I${DEP_INSTALL_DIR}/include LDFLAGS=-L${DEP_INSTALL_DIR}/lib
        BUILD_COMMAND make -j${N_CORES}
        INSTALL_COMMAND make install
        UPDATE_COMMAND ""
        BUILD_ALWAYS FALSE
        DEPENDS netcdf-c_ext
        DOWNLOAD_EXTRACT_TIMESTAMP TRUE
    )
else()
    message(STATUS "NetCDF-C++ found in ${DEP_INSTALL_DIR}/lib")
endif()


# ExternalProject for Boost
find_library(BOOST_SYSTEM_LIB NAMES boost_system HINTS ${DEP_INSTALL_DIR}/lib NO_DEFAULT_PATH)
find_library(BOOST_FILESYSTEM_LIB NAMES boost_filesystem HINTS ${DEP_INSTALL_DIR}/lib NO_DEFAULT_PATH)
if(NOT BOOST_SYSTEM_LIB OR NOT BOOST_FILESYSTEM_LIB)
    ExternalProject_Add(
        boost_ext
        URL https://archives.boost.io/release/1.87.0/source/boost_1_87_0.tar.gz
        PREFIX ${CMAKE_SOURCE_DIR}/_deps/boost
        CONFIGURE_COMMAND <SOURCE_DIR>/bootstrap.sh --prefix=${DEP_INSTALL_DIR}
        BUILD_COMMAND <SOURCE_DIR>/b2 -j${BOOST_BUILD_CORES} install --prefix=${DEP_INSTALL_DIR}
        BUILD_IN_SOURCE TRUE
        INSTALL_COMMAND ""
        UPDATE_COMMAND ""
        BUILD_ALWAYS FALSE
        DOWNLOAD_EXTRACT_TIMESTAMP TRUE
    )
else()
    message(STATUS "Boost found in ${DEP_INSTALL_DIR}/lib")
    set(Boost_INCLUDE_DIRS ${DEP_INSTALL_DIR}/include)
    set(Boost_LIBRARIES ${BOOST_SYSTEM_LIB} ${BOOST_FILESYSTEM_LIB})
endif()

# AMGX (version 2.4.0)
find_library(AMGXSH_LIBRARY NAMES amgxsh HINTS ${CMAKE_SOURCE_DIR}/_deps/amgx/src/lib NO_DEFAULT_PATH)
if(NOT AMGXSH_LIBRARY)
    message(STATUS "AMGX not found in ${DEP_INSTALL_DIR}, installing...")
    set(AMGX_NEEDS_INSTALL TRUE)
    ExternalProject_Add(
        amgx_ext
        GIT_REPOSITORY https://github.com/NVIDIA/AMGX.git
        GIT_TAG        v2.4.0
        GIT_SHALLOW    TRUE
        PREFIX         ${CMAKE_SOURCE_DIR}/_deps/amgx
        PATCH_COMMAND  find <SOURCE_DIR> -type f -name "CMakeLists.txt" -exec sed -i "s/-Wno-terminate//g" {} + &&
                   find <SOURCE_DIR> -type f -name "*.cmake" -o -name "CMakeLists.txt" -exec sed -i "s/-mp/-fopenmp/g" {} +
        CMAKE_ARGS     -DCMAKE_CXX_COMPILER=${GCC_HOME}/bin/g++
                       -DCMAKE_C_COMPILER=${GCC_HOME}/bin/gcc
                       -DCMAKE_CUDA_COMPILER=${NVHPC_HOME}/compilers/bin/nvcc
                       -DCMAKE_CUDA_HOST_COMPILER=${GCC_HOME}/bin/g++
                       -DCUDA_TOOLKIT_ROOT_DIR=${NVHPC_HOME}/cuda/11.2
                       -DCUDA_INCLUDE_DIRS=${NVHPC_HOME}/cuda/11.2/include
                       -DCUDA_CUDART_LIBRARY=${NVHPC_HOME}/cuda/11.2/lib64/libcudart.so
                       -DCUDA_cublas_LIBRARY=${NVHPC_HOME}/math_libs/11.2/lib64/libcublas.so
                       -DCUDA_cusparse_LIBRARY=${NVHPC_HOME}/math_libs/11.2/lib64/libcusparse.so
                       -DCUDA_nvToolsExt_LIBRARY=${NVHPC_HOME}/cuda/11.2/lib64/libnvToolsExt.so
                       -DMPI_C_COMPILER=${NVHPC_HOME}/comm_libs/openmpi/openmpi-3.1.5/bin/mpicc
                       -DMPI_CXX_COMPILER=${NVHPC_HOME}/comm_libs/openmpi/openmpi-3.1.5/bin/mpicxx
                       -DMPIEXEC=${NVHPC_HOME}/comm_libs/openmpi/openmpi-3.1.5/bin/mpirun
                       -DMPI_C_INCLUDE_PATH=${NVHPC_HOME}/comm_libs/openmpi/openmpi-3.1.5/include
                       -DMPI_CXX_INCLUDE_PATH=${NVHPC_HOME}/comm_libs/openmpi/openmpi-3.1.5/include
                       -DMPI_C_LIBRARIES=${NVHPC_HOME}/comm_libs/openmpi/openmpi-3.1.5/lib/libmpi.so
                       -DMPI_CXX_LIBRARIES=${NVHPC_HOME}/comm_libs/openmpi/openmpi-3.1.5/lib/libmpi.so
                       -DCMAKE_INSTALL_PREFIX=${CMAKE_SOURCE_DIR}/_deps/install
                       -DCMAKE_CUDA_ARCHITECTURES=60  # Match your GPU (e.g., Pascal)
                       -DCMAKE_CUDA_FLAGS="-arch=sm_60"  # Enforce compute_60
                       -DCMAKE_CXX_STANDARD=14  # Explicitly enforce C++14
                       -DCMAKE_EXE_LINKER_FLAGS="-L${GCC9_LIB_DIR} -Wl,-rpath,${GCC9_LIB_DIR}"
        BUILD_COMMAND  make -j${N_CORES}
        INSTALL_COMMAND make install 
        UPDATE_COMMAND ""
        BUILD_ALWAYS   FALSE
    )

    set(AMGXSH_LIBRARY "${DEP_INSTALL_DIR}/lib/libamgxsh.so")
else()
    message(STATUS "AMGX found in ${CMAKE_SOURCE_DIR}/amgx/src/lib")
endif()

# Add rte-rrtmgp-cpp as a subdirectory
add_subdirectory(external/rte-rrtmgp-cpp)

# Force rte-rrtmgp to use only _deps/install headers
set_target_properties(rte_rrtmgp PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${DEP_INSTALL_DIR}/include;${CMAKE_SOURCE_DIR}/external/rte-rrtmgp-cpp/include"
)

# Create the P3 Fortran shared library
add_library(p3 SHARED external/P3-microphysics/microphy_p3.f90)
set_target_properties(p3 PROPERTIES
    OUTPUT_NAME "p3"
    Fortran_PREPROCESS ON
)
if(OpenMP_Fortran_FOUND)
    target_link_libraries(p3 PRIVATE OpenMP::OpenMP_Fortran)
endif()

# Source files for VVM2D
file(GLOB_RECURSE SRC src/*.cpp src/*.hpp)
add_executable(vvm2d ${SRC})

# Link Fortran library and runtime to the executable
target_link_libraries(vvm2d PRIVATE p3 gfortran)

# Link OpenMP libraries
if(OpenMP_CXX_FOUND)
    target_link_libraries(vvm2d PRIVATE OpenMP::OpenMP_CXX)
endif()

# Specify expected library paths (will be built by ExternalProject)
set(HDF5_LIB ${DEP_INSTALL_DIR}/lib/libhdf5.so)
set(HDF5_CXX_LIB ${DEP_INSTALL_DIR}/lib/libhdf5_cpp.so)
set(NETCDF_C_LIB ${DEP_INSTALL_DIR}/lib/libnetcdf.so)
set(NETCDF_CXX_LIB ${DEP_INSTALL_DIR}/lib/libnetcdf_c++4.so)
set(BOOST_SYSTEM_LIB ${DEP_INSTALL_DIR}/lib/libboost_system.so)
set(BOOST_FILESYSTEM_LIB ${DEP_INSTALL_DIR}/lib/libboost_filesystem.so)

find_library(cudartPath cudart ${CUDA_LIB_DIR})
# Link libraries
target_link_libraries(vvm2d PRIVATE
    rte_rrtmgp
    ${HDF5_LIB}
    ${HDF5_CXX_LIB}
    ${NETCDF_C_LIB}
    ${NETCDF_CXX_LIB}
    ${BOOST_SYSTEM_LIB}
    ${BOOST_FILESYSTEM_LIB}
    ${AMGXSH_LIBRARY}
    ${cudartPath}
    ${MPI_CXX_LIBRARIES}  # Use this if MPI::MPI_CXX is unavailable
    stdc++
)

# Add dependencies
# add_dependencies(vvm2d hdf5_ext netcdf-c_ext netcdf-cxx4_ext boost_ext)

# Set runtime library paths (-rpath)
set_target_properties(vvm2d PROPERTIES
    LINK_FLAGS "-Wl,-rpath,${DEP_INSTALL_DIR}/lib -Wl,-rpath,${GCC_LIB_DIR} -Wl,-rpath,${GCC_LIB32_DIR}"
)

# CPack settings
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)

# Print configuration summary
message(STATUS "Configuration Summary:")
message(STATUS "  Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  C Compiler: ${CMAKE_C_COMPILER}")
message(STATUS "  C++ Compiler: ${CMAKE_CXX_COMPILER}")
message(STATUS "  Fortran Compiler: ${CMAKE_Fortran_COMPILER}")
message(STATUS "  OpenMP support: ${OpenMP_CXX_FOUND}")
if(OpenMP_CXX_FOUND)
    message(STATUS "  OpenMP CXX flags: ${OpenMP_CXX_FLAGS}")
endif()
