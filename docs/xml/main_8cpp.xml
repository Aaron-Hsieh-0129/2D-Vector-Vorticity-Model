<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="main_8cpp" kind="file" language="C++">
    <compoundname>main.cpp</compoundname>
    <includes refid="Declare_8hpp" local="yes">Declare.hpp</includes>
    <includes refid="ReadConfig_8hpp" local="yes">ReadConfig.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>Config.hpp</label>
        <link refid="Config_8hpp"/>
      </node>
      <node id="2">
        <label>Declare.hpp</label>
        <link refid="Declare_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ReadConfig.hpp</label>
        <link refid="ReadConfig_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/main.cpp</label>
        <link refid="main_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Eigen/Sparse</label>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="9">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/main.cpp" line="15" column="5" bodyfile="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/main.cpp" bodystart="15" bodyend="90"/>
        <references refid="classvvm_1_1PoissonSolver_1ad9cd3bfdd88142ba11cba49029a564ae" compoundref="PoissonSolver_8cpp" startline="480" endline="644">vvm::PoissonSolver::cal_u</references>
        <references refid="classvvm_1_1PoissonSolver_1ab342116991ca90ab52360e23009c67f3" compoundref="PoissonSolver_8cpp" startline="186" endline="478">vvm::PoissonSolver::cal_w</references>
        <references refid="classvvm_1_1Output_1ab92886c8eb037ae04f2201b6daf76364" compoundref="Output_8cpp" startline="262" endline="286">vvm::Output::create_all_directory</references>
        <references refid="classvvm_1_1Init_1a92147477c152b4b288dec6bb08168980" compoundref="Init_8cpp" startline="11" endline="119">vvm::Init::Init1d</references>
        <references refid="classvvm_1_1Init_1aa47a05958ff2bd5eddd57d64f4cd7711" compoundref="Init_8cpp" startline="121" endline="222">vvm::Init::Init2d</references>
        <references refid="classvvm_1_1PoissonSolver_1a5347fcfa9397d38496f70077a3ca8fed" compoundref="PoissonSolver_8cpp" startline="664" endline="858">vvm::PoissonSolver::InitPoissonMatrix</references>
        <references refid="classvvm_1a04ef9b52415cb1221f6c7d05f334aa72" compoundref="Declare_8hpp" startline="290">vvm::outputpath</references>
        <references refid="classvvm_1_1Output_1a331915125669cff07bc8fb2d6f3640df" compoundref="Output_8cpp" startline="8" endline="28">vvm::Output::printInit</references>
        <references refid="classvvm_1_1Iteration_1aad30e493dc2f262d8349e7832828a4db" compoundref="Iteration_8cpp" startline="128" endline="246">vvm::Iteration::TimeMarching</references>
        <references refid="ReadConfig_8cpp_1a296615d824e22b230a8481fb9d81f044" compoundref="ReadConfig_8cpp" startline="3" endline="48">vvm_read_config</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Declare_8hpp" kindref="compound">Declare.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PETSC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;petscsys.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;petsc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ReadConfig_8hpp" kindref="compound">ReadConfig.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Config(double<sp/>dt,<sp/>double<sp/>dx,<sp/>double<sp/>dz,<sp/>int<sp/>XRANGE,<sp/>int<sp/>ZRANGE,<sp/>double<sp/>TIMEEND,<sp/>int<sp/>TIMEROUTPUTSIZE,<sp/>std::string<sp/>outputpath,<sp/>int<sp/>OUTPUTSTEP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>Kx,<sp/>double<sp/>Kz,<sp/>double<sp/>TIMETS,<sp/>double<sp/>POISSONPARAMU,<sp/>double<sp/>POISSONPARAMW,<sp/>double<sp/>GRAVITY,<sp/>double<sp/>Cp,<sp/>double<sp/>Cv,<sp/>double<sp/>Rd,<sp/>double<sp/>Lv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>P0,<sp/>double<sp/>PSURF,<sp/>double<sp/>ADDFORCINGTIME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(PETSC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PetscCall(PetscInitialize(&amp;argc,<sp/>&amp;argv,<sp/>NULL,<sp/>NULL));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>omp_set_num_threads(8);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::setNbThreads(8);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>configs<sp/>=<sp/><ref refid="ReadConfig_8cpp_1a296615d824e22b230a8481fb9d81f044" kindref="member">vvm_read_config</ref>(</highlight><highlight class="stringliteral">&quot;../vvm_config.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>vvmoutputpath<sp/>=<sp/>configs[</highlight><highlight class="stringliteral">&quot;VVM_OUTPUTPATH&quot;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vvm_dt<sp/>=<sp/>std::stod(configs[</highlight><highlight class="stringliteral">&quot;VVM_DT&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vvm_dx<sp/>=<sp/>std::stod(configs[</highlight><highlight class="stringliteral">&quot;VVM_DX&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vvm_dz<sp/>=<sp/>std::stod(configs[</highlight><highlight class="stringliteral">&quot;VVM_DZ&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vvm_xrange<sp/>=<sp/>std::stoi(configs[</highlight><highlight class="stringliteral">&quot;VVM_XRANGE&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vvm_zrange<sp/>=<sp/>std::stoi(configs[</highlight><highlight class="stringliteral">&quot;VVM_ZRANGE&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vvm_timeend<sp/>=<sp/>std::stod(configs[</highlight><highlight class="stringliteral">&quot;VVM_TIMEEND&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vvm_outputstep<sp/>=<sp/>std::stoi(configs[</highlight><highlight class="stringliteral">&quot;VVM_OUTPUTSTEP&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vvm_case<sp/>=<sp/>std::stoi(configs[</highlight><highlight class="stringliteral">&quot;VVM_CASE&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vvm_moisture_nudge_time<sp/>=<sp/>std::stod(configs[</highlight><highlight class="stringliteral">&quot;VVM_MOISTURE_NUDGE_TIME&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classConfig__VVM" kindref="compound">Config_VVM</ref><sp/>config(vvm_dt,<sp/>vvm_dx,<sp/>vvm_dz,<sp/>vvm_xrange,<sp/>vvm_zrange,<sp/>vvm_timeend,<sp/>10000,<sp/>vvmoutputpath,<sp/>vvm_outputstep,<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>70.,<sp/>70.,<sp/>0.01,<sp/>1E-22,<sp/>9.80665,<sp/>1003.5,<sp/>716.5,<sp/>287.,<sp/>2.5E6,<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1E5,<sp/>96500.,<sp/>-1.,<sp/>vvm_case,<sp/>vvm_moisture_nudge_time);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvvm" kindref="compound">vvm</ref><sp/>model(config);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(LOADFROMPREVIOUSFILE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vvm::Init::LoadFromPreviousFile(model);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(LOAD2DINIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vvm::Init::Load2DInit(model);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvvm_1_1Init_1a92147477c152b4b288dec6bb08168980" kindref="member">vvm::Init::Init1d</ref>(model);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvvm_1_1Init_1aa47a05958ff2bd5eddd57d64f4cd7711" kindref="member">vvm::Init::Init2d</ref>(model);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>PETSC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvvm_1_1PoissonSolver_1a5347fcfa9397d38496f70077a3ca8fed" kindref="member">vvm::PoissonSolver::InitPoissonMatrix</ref>(model);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvvm_1_1Output_1ab92886c8eb037ae04f2201b6daf76364" kindref="member">vvm::Output::create_all_directory</ref>(model);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvvm_1_1Output_1a331915125669cff07bc8fb2d6f3640df" kindref="member">vvm::Output::printInit</ref>(model);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>This<sp/>initialization<sp/>is<sp/>for<sp/>NGAC3F<sp/>coupling<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::ifstream<sp/>inputFile(&quot;/data/Aaron/TMIF/th0.txt&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>model.nz-1;<sp/>k++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>model.nx-1;<sp/>i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputFile<sp/>&gt;&gt;<sp/>model.th[i][k];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model.thm[i][k]<sp/>=<sp/>model.th[i][k];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>grads<sp/>ctl<sp/>file<sp/>to<sp/>the<sp/>output<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;../scripts/vvm.ctl&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>destination<sp/>=<sp/>model.<ref refid="classvvm_1a04ef9b52415cb1221f6c7d05f334aa72" kindref="member">outputpath</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;nc/vvm.ctl&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>command<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cp<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>source<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>destination;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>the<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>system(command.c_str());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(POISSONTEST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvvm_1_1PoissonSolver_1ab342116991ca90ab52360e23009c67f3" kindref="member">vvm::PoissonSolver::cal_w</ref>(model);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvvm_1_1PoissonSolver_1ad9cd3bfdd88142ba11cba49029a564ae" kindref="member">vvm::PoissonSolver::cal_u</ref>(model);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvvm_1_1Iteration_1aad30e493dc2f262d8349e7832828a4db" kindref="member">vvm::Iteration::TimeMarching</ref>(model);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(PETSC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PetscCall(PetscFinalize());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/main.cpp"/>
  </compounddef>
</doxygen>
