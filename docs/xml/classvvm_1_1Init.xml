<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classvvm_1_1Init" kind="class" language="C++" prot="public">
    <compoundname>vvm::Init</compoundname>
    <includes refid="Declare_8hpp" local="no">Declare.hpp</includes>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classvvm_1_1Init_1a92147477c152b4b288dec6bb08168980" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vvm::Init::Init1d</definition>
        <argsstring>(vvm &amp;model)</argsstring>
        <name>Init1d</name>
        <qualifiedname>vvm::Init::Init1d</qualifiedname>
        <param>
          <type><ref refid="classvvm" kindref="compound">vvm</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Declare.hpp" line="525" column="21" bodyfile="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Init.cpp" bodystart="9" bodyend="108"/>
        <references refid="classvvm_1af45deea67718860b5736da7b80a36a98" compoundref="Boundary_8cpp" startline="3" endline="7">vvm::BoundaryProcess1D_center</references>
        <references refid="classvvm_1afd7e3e35d5742ea1f0c6e8c5ad5f97f2" compoundref="Declare_8hpp" startline="290">vvm::Cp</references>
        <references refid="classvvm_1abcb5783f82d1e94feb0eb2f5174031aa" compoundref="Declare_8hpp" startline="291">vvm::Cv</references>
        <references refid="classvvm_1a2caed43a215a43912fe28e2170ac2cd0" compoundref="Declare_8hpp" startline="277">vvm::dx</references>
        <references refid="classvvm_1aa10689462c2d23ff7514d71e1b44f272" compoundref="Declare_8hpp" startline="278">vvm::dz</references>
        <references refid="classvvm_1a2109bbdcb86859142d66ca8f9f2d2c5d" compoundref="Declare_8hpp" startline="289">vvm::GRAVITY</references>
        <references refid="classvvm_1a2e9e20f980347cce8cf4516c01dedd6a" compoundref="Declare_8hpp" startline="320">vvm::lambda2</references>
        <references refid="classvvm_1a1c19d7dc2ab861379c3c69c7e79bd5c8" compoundref="Declare_8hpp" startline="274">vvm::nz</references>
        <references refid="classvvm_1a175e5bb5004b028f5733ae8a296f8872" compoundref="Declare_8hpp" startline="294">vvm::P0</references>
        <references refid="classvvm_1a460bba9fff54f9b15ff0b42b7cbd49c0" compoundref="Declare_8hpp" startline="314">vvm::pb</references>
        <references refid="classvvm_1a26af306441d528502bb043bde41c1d4f" compoundref="Declare_8hpp" startline="311">vvm::pib</references>
        <references refid="classvvm_1a8f75011271123e87d6ba649c6851e69f" compoundref="Declare_8hpp" startline="295">vvm::PSURF</references>
        <references refid="classvvm_1a4196b3b03002394826deea7481714e78" compoundref="Declare_8hpp" startline="312">vvm::qvb</references>
        <references refid="classvvm_1aef52e76881cd361c58834b560f002573" compoundref="Declare_8hpp" startline="313">vvm::qvsb</references>
        <references refid="classvvm_1a10fba9755b4da519a70c79fb0ff20847" compoundref="Declare_8hpp" startline="292">vvm::Rd</references>
        <references refid="classvvm_1af25e3367c5ad1d011c15ff7d774a0abf" compoundref="Declare_8hpp" startline="309">vvm::rhou</references>
        <references refid="classvvm_1a7edff5662fbdb8df0fe3094a6ab3efb7" compoundref="Declare_8hpp" startline="310">vvm::rhow</references>
        <references refid="classvvm_1a07e5c32b8b9f7f31ba90c29c6e11adfa" compoundref="Declare_8hpp" startline="306">vvm::thb</references>
        <references refid="classvvm_1a7521c72c09b92ebed7d84d5ec6cab411" compoundref="Declare_8hpp" startline="308">vvm::thb_zeta</references>
        <references refid="classvvm_1adf7c0e67261aaea9d60315e02d59ee1c" compoundref="Declare_8hpp" startline="307">vvm::thbm</references>
        <references refid="classvvm_1aeefca932b6bff42753f1abd44591ea03" compoundref="Declare_8hpp" startline="317">vvm::thvb</references>
        <references refid="classvvm_1a9428709fb1a80782bbdbc9ebd5ed06ea" compoundref="Declare_8hpp" startline="318">vvm::thvbm</references>
        <references refid="classvvm_1a70455ffa8f9a2d564947bf7b3bfd3818" compoundref="Declare_8hpp" startline="319">vvm::z</references>
        <referencedby refid="main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="main_8cpp" startline="14" endline="56">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvvm_1_1Init_1aa47a05958ff2bd5eddd57d64f4cd7711" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vvm::Init::Init2d</definition>
        <argsstring>(vvm &amp;model)</argsstring>
        <name>Init2d</name>
        <qualifiedname>vvm::Init::Init2d</qualifiedname>
        <param>
          <type><ref refid="classvvm" kindref="compound">vvm</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Declare.hpp" line="526" column="21" bodyfile="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Init.cpp" bodystart="110" bodyend="208"/>
        <references refid="classvvm_1a6e3cc05ead48d2bb558d08fdf2e93df9" compoundref="Declare_8hpp" startline="296">vvm::addforcingtime</references>
        <references refid="classvvm_1a26777567d798e7a46a54a9adc5d7242f" compoundref="Boundary_8cpp" startline="9" endline="19">vvm::BoundaryProcess2D_center</references>
        <references refid="classvvm_1ac41a46f58ad272f540b96ad68895f88d" compoundref="Boundary_8cpp" startline="21" endline="30">vvm::BoundaryProcess2D_westdown</references>
        <references refid="classvvm_1a63672bc63f38db96f69e95819ccae586" compoundref="Declare_8hpp" startline="297">vvm::CASE</references>
        <references refid="classvvm_1aa10689462c2d23ff7514d71e1b44f272" compoundref="Declare_8hpp" startline="278">vvm::dz</references>
        <references refid="classvvm_1a714970757ba0e39eba63e90160b9baea" compoundref="Declare_8hpp" startline="516">vvm::init_th_forcing</references>
        <references refid="classvvm_1a54019773003b18a98f267df45ee230bb" compoundref="Declare_8hpp" startline="273">vvm::nx</references>
        <references refid="classvvm_1a1c19d7dc2ab861379c3c69c7e79bd5c8" compoundref="Declare_8hpp" startline="274">vvm::nz</references>
        <references refid="classvvm_1a2e358a42bc3c08a8bd162e5d600d743d" compoundref="Declare_8hpp" startline="361">vvm::qc</references>
        <references refid="classvvm_1a84a7559c5181efa5298bb52a9590ffed" compoundref="Declare_8hpp" startline="362">vvm::qcm</references>
        <references refid="classvvm_1a4aa22ea3e57d8899527556b2bd7f92fb" compoundref="Declare_8hpp" startline="360">vvm::qcp</references>
        <references refid="classvvm_1ae8846fd38da9bfa59aca4c30b80f4827" compoundref="Declare_8hpp" startline="364">vvm::qr</references>
        <references refid="classvvm_1ac7f8c144268c93330663189e886459db" compoundref="Declare_8hpp" startline="365">vvm::qrm</references>
        <references refid="classvvm_1ae82e779827b9d2fac34c37ca944ba2f7" compoundref="Declare_8hpp" startline="363">vvm::qrp</references>
        <references refid="classvvm_1ae463dcd6a3bd5edcb0057346216a2ee9" compoundref="Declare_8hpp" startline="358">vvm::qv</references>
        <references refid="classvvm_1a4196b3b03002394826deea7481714e78" compoundref="Declare_8hpp" startline="312">vvm::qvb</references>
        <references refid="classvvm_1ac2a3231c8911361e30eacdc4a1b3327f" compoundref="Declare_8hpp" startline="359">vvm::qvm</references>
        <references refid="classvvm_1a345c7e128e6c8a81a3949456530a428a" compoundref="Declare_8hpp" startline="357">vvm::qvp</references>
        <references refid="classvvm_1a3ca267ed2f973f92e35d839085baf702" compoundref="Declare_8hpp" startline="267">vvm::rdx</references>
        <references refid="classvvm_1a68ea5e54b9a54c4256969b5ba5dd4cbd" compoundref="Declare_8hpp" startline="269">vvm::rdz</references>
        <references refid="classvvm_1a7edff5662fbdb8df0fe3094a6ab3efb7" compoundref="Declare_8hpp" startline="310">vvm::rhow</references>
        <references refid="classvvm_1a590abe748fc6d7ee9c24108100db04a9" compoundref="Declare_8hpp" startline="327">vvm::th</references>
        <references refid="classvvm_1a07e5c32b8b9f7f31ba90c29c6e11adfa" compoundref="Declare_8hpp" startline="306">vvm::thb</references>
        <references refid="classvvm_1a37ff81702e9ae1cdae172a6fbd6fe57e" compoundref="Declare_8hpp" startline="328">vvm::thm</references>
        <references refid="classvvm_1ae9b64ac44720501013d0f18fd774474d" compoundref="Declare_8hpp" startline="326">vvm::thp</references>
        <references refid="classvvm_1a1ac0d1c50fc3935a312b6f667a1c34c0" compoundref="Declare_8hpp" startline="329">vvm::u</references>
        <references refid="classvvm_1a15f5bebeb59fa99feedd3945e7cd7669" compoundref="Declare_8hpp" startline="302">vvm::ubarTop</references>
        <references refid="classvvm_1a418daede3a9c0ed998842ff792647f2f" compoundref="Declare_8hpp" startline="303">vvm::ubarTopm</references>
        <references refid="classvvm_1a03a120f9647d1b680a8552a1743f47bf" compoundref="Declare_8hpp" startline="330">vvm::w</references>
        <references refid="classvvm_1a9543af4d64a67a22aa91dcca6d1906c6" compoundref="Declare_8hpp" startline="324">vvm::zeta</references>
        <references refid="classvvm_1a9940c24c524df0c0bcfa1f009857e4cd" compoundref="Declare_8hpp" startline="325">vvm::zetam</references>
        <references refid="classvvm_1a44e87b0393bbb303fe26c12b4defc572" compoundref="Declare_8hpp" startline="323">vvm::zetap</references>
        <referencedby refid="main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="main_8cpp" startline="14" endline="56">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="classvvm_1_1Init_1a3bf05b218724366e0d64ca1199d90b56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vvm::Init::RandomPerturbation</definition>
        <argsstring>(vvm &amp;, int seed)</argsstring>
        <name>RandomPerturbation</name>
        <qualifiedname>vvm::Init::RandomPerturbation</qualifiedname>
        <param>
          <type><ref refid="classvvm" kindref="compound">vvm</ref> &amp;</type>
          <defname>model</defname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Declare.hpp" line="527" column="21" bodyfile="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Init.cpp" bodystart="412" bodyend="441"/>
        <references refid="classvvm_1a26777567d798e7a46a54a9adc5d7242f" compoundref="Boundary_8cpp" startline="9" endline="19">vvm::BoundaryProcess2D_center</references>
        <references refid="classvvm_1aa10689462c2d23ff7514d71e1b44f272" compoundref="Declare_8hpp" startline="278">vvm::dz</references>
        <references refid="classvvm_1a714970757ba0e39eba63e90160b9baea" compoundref="Declare_8hpp" startline="516">vvm::init_th_forcing</references>
        <references refid="classvvm_1a54019773003b18a98f267df45ee230bb" compoundref="Declare_8hpp" startline="273">vvm::nx</references>
        <references refid="classvvm_1a1c19d7dc2ab861379c3c69c7e79bd5c8" compoundref="Declare_8hpp" startline="274">vvm::nz</references>
        <references refid="classvvm_1a70455ffa8f9a2d564947bf7b3bfd3818" compoundref="Declare_8hpp" startline="319">vvm::z</references>
        <referencedby refid="classvvm_1_1Iteration_1aad30e493dc2f262d8349e7832828a4db" compoundref="Iteration_8cpp" startline="128" endline="230">vvm::Iteration::TimeMarching</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classvvm_1_1Init_1afdbb216f74a28ddfd1fa525c80f11f1b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vvm::Init::GetTB</definition>
        <argsstring>(int i, vvm &amp;model)</argsstring>
        <name>GetTB</name>
        <qualifiedname>vvm::Init::GetTB</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classvvm" kindref="compound">vvm</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Declare.hpp" line="537" column="23" bodyfile="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Init.cpp" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classvvm_1_1Init_1aec9a640b646fb0736644d4dbfd8f1997" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vvm::Init::GetTHRAD</definition>
        <argsstring>(int i, int k, vvm &amp;model)</argsstring>
        <name>GetTHRAD</name>
        <qualifiedname>vvm::Init::GetTHRAD</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classvvm" kindref="compound">vvm</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Declare.hpp" line="538" column="23" bodyfile="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Init.cpp" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classvvm_1_1Init_1a557a1881c73186b1f67a323643be6ce3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vvm::Init::GetTH</definition>
        <argsstring>(int i, int k, vvm &amp;model)</argsstring>
        <name>GetTH</name>
        <qualifiedname>vvm::Init::GetTH</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classvvm" kindref="compound">vvm</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Declare.hpp" line="539" column="23" bodyfile="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Init.cpp" bodystart="227" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classvvm_1_1Init_1a8c4a5236aeacf87aad7a18260441029b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vvm::Init::GetQVB</definition>
        <argsstring>(int k, int dz)</argsstring>
        <name>GetQVB</name>
        <qualifiedname>vvm::Init::GetQVB</qualifiedname>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Declare.hpp" line="541" column="27" bodyfile="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Init.cpp" bodystart="235" bodyend="240"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>vvm::Init</label>
        <link refid="classvvm_1_1Init"/>
      </node>
    </collaborationgraph>
    <location file="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Declare.hpp" line="523" column="5" bodyfile="/home/Aaron/TMIF_VVM_CSSWM/2DVVM/src/Declare.hpp" bodystart="523" bodyend="543"/>
    <listofallmembers>
      <member refid="classvvm_1_1Init_1a8c4a5236aeacf87aad7a18260441029b" prot="private" virt="non-virtual"><scope>vvm::Init</scope><name>GetQVB</name></member>
      <member refid="classvvm_1_1Init_1afdbb216f74a28ddfd1fa525c80f11f1b" prot="private" virt="non-virtual"><scope>vvm::Init</scope><name>GetTB</name></member>
      <member refid="classvvm_1_1Init_1a557a1881c73186b1f67a323643be6ce3" prot="private" virt="non-virtual"><scope>vvm::Init</scope><name>GetTH</name></member>
      <member refid="classvvm_1_1Init_1aec9a640b646fb0736644d4dbfd8f1997" prot="private" virt="non-virtual"><scope>vvm::Init</scope><name>GetTHRAD</name></member>
      <member refid="classvvm_1_1Init_1a92147477c152b4b288dec6bb08168980" prot="public" virt="non-virtual"><scope>vvm::Init</scope><name>Init1d</name></member>
      <member refid="classvvm_1_1Init_1aa47a05958ff2bd5eddd57d64f4cd7711" prot="public" virt="non-virtual"><scope>vvm::Init</scope><name>Init2d</name></member>
      <member refid="classvvm_1_1Init_1a3bf05b218724366e0d64ca1199d90b56" prot="public" virt="non-virtual"><scope>vvm::Init</scope><name>RandomPerturbation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
